
# coding: utf-8

# In[3]:


'''现有大学校园网的日志数据 ，290 条大学生的校园网使用情况数据 
数据包括用户 ID ，设备的 MAC 地址 ，IP 地址 ，开始上网时间 开始
上网时间 ，停止上网时间 ，上 网时长 ，校园网套餐等 。利用已有数
据 ，分析学生上网的模式 。'''


# In[34]:


#1.建立工程，导入sklearn相关包

import numpy as np 
import sklearn.cluster as skc
from sklearn import metrics
import matplotlib.pyplot as plt


# In[35]:


#2.读入数据并进行处理

mac2id = dict()
onlinetimes = []
f = open(r'E:\大数据学习\机器学习\MOOC Python机器学习应用\mooc课程数据\课程数据\聚类\TestData.txt',encoding = 'UTF-8')
for line in f:
    mac = line.split(',')[2]
    onlinetime = int(line.split(',')[6])
    starttime = int(line.split(',')[4].split(' ')[1].split(':')[0])
#以上4行 读取每条数据中的mac地址，开始上网时间，上网时长

    if mac not in  mac2id:
        mac2id[mac] = len(onlinetimes)
        onlinetimes.append((starttime,onlinetime))
    else:
        onlinetimes[mac2id[mac]] = [(starttime,onlinetime)]
#以上5行 mac2id是一个字典，key是mac地址，value对应mac地址的上网时长及开始上网时间
real_X = np.array(onlinetimes).reshape(-1,2)    


# In[38]:


#3-1 上网时间聚类，创建DBSCAN算法实例，并进行训练，获得标签：

X = real_X[:,0:1]

db = skc.DBSCAN(eps = 0.01,min_samples = 20).fit(X)
labels = db.labels_
# 调用DBSCAN方法进行训练，labels为每个数局的簇标签

print('Labels:')
print(labels)
ratio = len(labels[labels[:] == -1])/len(labels)
print('Noise ratio:',format(ratio,'.2%'))
#打印数据被标记上的标签，计算标签为-1，即噪声数据的比例

n_clusters_ = len(set(labels)) - (1 if 1 in labels else 0)

print('Estimated number of cluster: %d' % n_clusters_)
print('Silhouette Coefficient: #.3f'% metrics.silhouette_score(X,labels))
#计算簇的个数并打印，评价聚类效果


# In[41]:


#3-2 统计每一个簇内的样本个数，均值，标准差
for i in range(n_clusters_):
    print('Cluster ',i,':')
    count = len(X[labels == i])
    mean = np.mean(real_X[labels ==i][:,1])
    std = np.std(real_X[labels ==i][:,1])
    print('\t number of sample: ',count)
    print('\t mean of sample  : ',format(mean,'.1f'))
    print('\t std of sample   : ',format(std,'.1f'))
    print(list(X[labels == i].flatten()))
     


# In[42]:


#输出标签，查看结果

plt.hist(X,24)


# In[43]:


#全套代码

import numpy as np
import sklearn.cluster as skc
from sklearn import metrics
import matplotlib.pyplot as plt
 
 
mac2id=dict()
onlinetimes=[]
f=open(r'E:\大数据学习\机器学习\MOOC Python机器学习应用\mooc课程数据\课程数据\聚类\TestData.txt',encoding = 'UTF-8')
for line in f:
    mac=line.split(',')[2]
    onlinetime=int(line.split(',')[6])
    starttime=int(line.split(',')[4].split(' ')[1].split(':')[0])
    if mac not in mac2id:
        mac2id[mac]=len(onlinetimes)
        onlinetimes.append((starttime,onlinetime))
    else:
        onlinetimes[mac2id[mac]]=[(starttime,onlinetime)]
real_X=np.array(onlinetimes).reshape((-1,2))
 
X=real_X[:,0:1]
 
db=skc.DBSCAN(eps=0.01,min_samples=20).fit(X)
labels = db.labels_
 
print('Labels:')
print(labels)
raito=len(labels[labels[:] == -1]) / len(labels)
print('Noise raito:',format(raito, '.2%'))
 
n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)
 
print('Estimated number of clusters: %d' % n_clusters_)
print("Silhouette Coefficient: %0.3f"% metrics.silhouette_score(X, labels))
 
for i in range(n_clusters_):
    print('Cluster ',i,':')
    print(list(X[labels == i].flatten()))
     
plt.hist(X,24)

